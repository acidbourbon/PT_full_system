#!/usr/bin/env python3

# ------ standart Python classes ---------

import os
import time
import sys, tty, termios
import threading
#import json
from numpy import *
#from glob import glob

# ------ PANDa specified classes ---------
sys.path.append(os.path.split(os.path.realpath(__file__))[0]+"/Devices")

from config import *

# -- laboratory equipment --
from signal_generator import signal_generator

# -- Other --
from TrbDataReader import TrbDataReader
from PANDAmux import PANDAinjectors
from PANDAfeb import PANDAfeb

from measSCurve import measSCurve
from measBaseline import measBaseline
from measDacs import measDacs
from measTOTs import measTOTs

#os.system("clear")

# --- Charge Injectors configuration ----------

Injectors = PANDAinjectors()

# --- FEB and data reader configuration ----------
BranchCfg = {}

#Configure FEB boards connected to the system BranchCfg[testBranch]={"InjAddr":7,"UserID":"B000"}
BranchCfg[0] = {"InjAddr":0,"UserID":"B000"} 
BranchCfg[1] = {"InjAddr":1,"UserID":"B001"} 
BranchCfg[2] = {"InjAddr":2,"UserID":"B002"} 
BranchCfg[3] = {"InjAddr":3,"UserID":"B003"} 
BranchCfg[4] = {"InjAddr":4,"UserID":"B004"} 
BranchCfg[5] = {"InjAddr":5,"UserID":"B005"} 
BranchCfg[6] = {"InjAddr":6,"UserID":"B006"} 
BranchCfg[7] = {"InjAddr":7,"UserID":"B007"}

#list of all active branches
testBranches = list(BranchCfg.keys())

DataReader = TrbDataReader(testBranches)

Febs = {}
for i in testBranches:
	Febs[i] = PANDAfeb(i,BranchCfg[i]["UserID"])
	for qinf in Injectors.InjObjects[BranchCfg[i]["InjAddr"]].qinFactors: 
		Febs[i].convFactors.append(qinf * Injectors.globConvFactor) #conversion factor will be used for all measurements in this sesion and stored with measurements data
	

# ---- initializing laboratory equipment ----

gen = signal_generator("ip:192.168.0.15:5025")
gen.initialize((1,2))


# ---- creating mesurements classes objects ----

sCurveMeas = measSCurve(gen,DataReader,Injectors,Febs)
baseMeas = measBaseline(gen,DataReader,Injectors,Febs)
dacsMeas = measDacs(gen,DataReader,Injectors,Febs)
totsMeas = measTOTs(gen,DataReader,Injectors,Febs)

#------------------------------------------------------------------------------------------------------
#   Some functions for better organization
#------------------------------------------------------------------------------------------------------

# ---------------- Set indicators
def setStatusIndicator(sOK=None,sERR="err"):
	status={0:sERR,1:sOK}
	for feb in Febs: 
		Injectors.InjObjects[BranchCfg[feb]["InjAddr"]].setIndicator(status[int(Febs[feb].FEBok)])

# ---------------- Checking status of Febs and remove bad boards from further mesurements
def removeBadFEBs():
	delkeys=[]
	for feb in Febs: 
		if not Febs[feb].FEBok:
			Febs[feb].log("FEB: %s (Branch: %d) removing from further testing list!"%(Febs[feb].userID,feb),"red",0)
			delkeys.append(feb)
	setStatusIndicator()
	for dk in delkeys: del Febs[dk]
	printc("Active FEBs: %s"%(str(list(Febs.keys()))),"blue",0)


def goBackground(f,*a):
	thread = threading.Thread(target=f, args=a)
	thread.start()

if __name__=="__main__":
	#------------------------------------------------------------------------------------------------------
	#------------------------------------------------------------------------------------------------------
	#-----------------------------------     Measurements Procedure   -------------------------------------
	#------------------------------------------------------------------------------------------------------
	#------------------------------------------------------------------------------------------------------
	removeBadFEBs()
	
	#sys.exit()
	#gen.set_display_state(False)

	ChipConfs = ["1mV20ns","2mV15ns","2mV20ns","4mV15ns","4mV20ns"]
	

	'''
	# --------  S-curve measurements for injector calibration  ---------------------
	ConfName = "4mV20ns"
	MeasName = "%s"%ConfName

	for feb in Febs: Febs[feb].setTypicalConfiguration(ConfName)
	for feb in Febs: Febs[feb].setThreshold(120)
	
	#[14, 15, 19, 13, 15, 13, 13, 13, 13, 21, 20, 13, 14, 13, 16, 16]
	#baselines = baseMeas.getBaselineSettings("Simple%d"%nr,"Center")
	#printdict(baselines)
	#for feb in Febs: Febs[feb].setBaselines(baselines[feb])
	for feb in Febs: Febs[feb].setBaselines([14, 15, 19, 13, 15, 13, 13, 13, 13, 21, 20, 13, 14, 13, 16, 16])
	nr=1
	av=6
	
	if len(testBranches) != 1:
		print("Only one test branch should be active for calibration!!!!")
		sys.exit()
	f=testBranches[0]
	print("Branch: ", f)
	
	medians=[]
	for nr in range(av):
	
		sCurveMeas.runScurveScan("test%d"%nr) #,[0]
		for feb in Febs: Febs[feb].saveData()  #saving data to files...
		sCurveMeas.fitScurveData("test%d"%nr)
		for feb in Febs: Febs[feb].saveData()  #saving data to files...

		sCurveMeas.plotScurveDetails("test%d"%nr)
		sCurveMeas.plotScurveParams()
		
		print(Febs[f].measData["SCurve_test%d"%nr]["info"])
		x=[]
		for ch in range(16):
			x.append(Febs[f].fittedData["SCurve_test%d"%nr][ch]["median"])
		
		print(x)
		medians.append(x)
		
	printlist(medians)
	
	#medl=[]
	#for ch in range(16):
	#	medch = [medians[nr][ch] for nr in range(av)]
	#	medl.append(mean(medch))
	#print(medl)
	
	medl2=[]
	for ch in range(16):
		medch = [medians[nr+1][ch] for nr in range(av-1)]
		medl2.append(mean(medch))
	print(medl2)
	
	

	#30x Scurve medians for calib feb at th=120, baseline corrected:
	#[424.8274351086403, 418.2254862641273, 419.9868712883545, 425.40627170313667, 428.4417430486428, 422.6986844022537, 420.21448093872016, 424.0552012226898, 411.69110350179443, 415.8785878415367, 407.47487138971, 409.0403281767293, 417.85875889234944, 409.8867266320283, 405.10824566102343, 414.61575844032393]"
	#[424.86149738690284, 418.1998678088781, 419.9520454430841, 425.43448571327383, 428.3145800292553, 422.7091528526402, 420.16658345794826, 424.108844075372, 411.8085376764513, 415.7796565757321, 407.4142965061713, 409.1061337687526, 417.7968265389576, 409.8802130046689, 405.01440916074307, 414.6188277549035]"
	#[424.94656021550276, 418.35185376823887, 420.11453171034435, 425.5153024157163, 428.4320384556542, 422.76685946732994, 420.1164704358114, 424.18150437367973, 411.8565073182135, 415.9632036302606, 407.56327582861724, 408.92500299743506, 417.86855897027624, 409.8727661483384, 404.9942568971467, 414.69829461916]"
	#[424.952056222374, 418.3589824884439, 420.15111312578676, 425.53866446980624, 428.35928440822516, 422.78933935645887, 420.24799059102315, 424.27194910665924, 411.820547249798, 415.9765204903002, 407.6480411840995, 408.9775871567585, 417.83940793202373, 409.82765467236277, 405.15945587944077, 414.76551586857045]"
	#[425.0932369571845, 418.440652655411, 420.0850856060794, 425.5144017721784, 428.4676326371829, 422.82070864615446, 420.3323252449076, 424.29231244245375, 412.05213852736784, 415.9713819614306, 407.41343667043355, 409.0969212418397, 417.8989322982125, 409.91886037800873, 405.2211358327485, 414.8948595330383]"
	#[425.2839933892875, 418.7089425040219, 420.2778049814211, 425.71141058091206, 428.588927496837, 422.9914104854738, 420.4920679392091, 424.507955999853, 412.24761771299694, 416.3093097932909, 407.9351509880953, 409.28372553576037, 417.9876501010278, 410.1996257869805, 405.32096500318704, 415.03474283947827]"
	#[425.3107992298738, 418.6520075309612, 420.3404949966722, 425.7412088181568, 428.5748998275999, 422.9887252673144, 420.34220108379253, 424.31962067736623, 412.23117444705633, 416.1999973447452, 407.8839902453441, 409.27947043390765, 417.9262031005896, 410.138510068473, 405.3060518727719, 414.86705588795104]"
	#[425.24860880232706, 418.55684942563687, 420.26510146431303, 425.6842016696242, 428.6870261536228, 422.9280586157289, 420.3408637272569, 424.4278598278553, 412.06669153846036, 416.1326947784416, 407.74923295667026, 409.2918062307568, 418.04994989376837, 410.0477608425486, 405.07419709670756, 414.8898299538767]"
	#[425.2644767772617, 418.63625840397975, 420.35652486267804, 425.7594183785786, 428.6290288571919, 423.0129387635625, 420.4690472645312, 424.4196122800144, 412.1133049528057, 416.1189047611084, 407.91656505939045, 409.28577426490443, 417.98059256577864, 410.04115049627865, 405.2521748514903, 414.8229791685795]"
	#[425.1327823194074, 418.4822084591483, 420.1221847184728, 425.5219879546332, 428.4391030540483, 422.8591891526744, 420.5009044519215, 424.44225894334585, 412.06125977389286, 416.04448471552587, 407.5940644000311, 409.0444788097526, 417.73602737772046, 409.90201548997544, 405.3186492251027, 414.8852635533404]"
	#[425.1848903926209, 418.5756924390802, 420.2632494902432, 425.71673902496457, 428.66729002653466, 423.0276065804305, 420.5378902512221, 424.498630007843, 412.1111178357761, 416.14818319325457, 407.7072539322028, 409.3535469922082, 417.9424137527397, 410.16448245368287, 405.40509322367404, 414.951058613877]"
	#[425.2474314596404, 418.61601789377715, 420.2861732822734, 425.6073067022293, 428.4779601899584, 422.7566921859525, 420.2871653567755, 424.24235187758444, 412.0466975537264, 416.1120997995448, 407.7498701828611, 409.26197353844844, 417.8196934811371, 409.91489258402123, 405.09446921246973, 414.6392826518443]"
	#[425.042337465598, 418.45299424418477, 420.1319161332872, 425.62719569816096, 428.56892651773944, 422.82572685344127, 420.22471692087845, 424.2301836912513, 411.9685863093478, 415.9301944805995, 407.6277474716601, 409.22270519461426, 417.92571510194233, 409.9794593793153, 405.05381985002253, 414.72075663661315]"
	#[424.99921953236685, 418.4844484595207, 420.18890718762617, 425.5681500170411, 428.3382415784074, 422.6763968925764, 420.1275652545212, 424.19673482658425, 411.89641556737877, 416.09548124179565, 407.68017207586024, 409.00001359777093, 417.7755892356526, 409.8183950796797, 405.04801479987736, 414.7020425316615]"
	#[425.0297586660902, 418.47579336940885, 420.22445012299005, 425.611747001502, 428.6092493405922, 423.0018550786337, 420.40370916122475, 424.3313806519861, 412.07095386404495, 416.135460465548, 407.81230402490183, 409.2517632338445, 417.8959770206816, 410.00212584754195, 405.238103528135, 414.9200790704657]"
	#[425.14480068800003, 418.5214150160999, 420.2337096713814, 425.7046843495231, 428.6323218834989, 423.03063218075584, 420.4082050909458, 424.34869492062074, 412.0806202978463, 416.0750410754285, 407.7757961859841, 409.3546227334213, 417.97921991501175, 410.16628292394836, 405.1982373842379, 414.8234306899815]"
	#[425.0883654722036, 418.62312265392524, 420.2667172567346, 425.64009173420834, 428.5775945196708, 422.90600793679727, 420.38656883565596, 424.4122076773019, 411.965452916721, 416.13260673505874, 407.9001320413638, 409.31644048779646, 417.93856084337773, 410.0632236185621, 405.2588115922235, 414.802760141161]"
	#[425.13843849448443, 418.5761467803915, 420.2442725800464, 425.67321757322395, 428.62092980465275, 422.9837059974595, 420.4849514088313, 424.35037547156213, 412.03470326159436, 416.1680208449661, 407.7559878366027, 409.40750921223497, 417.94863760351086, 410.1665867285084, 405.28638736232665, 414.8756744832528]"
	#[425.18784263069233, 418.6520032630232, 420.3788955148013, 425.8178934234645, 428.62868757598284, 423.0107737730141, 420.4671568820584, 424.46272255043465, 412.1539690652834, 416.2958099187622, 407.9911838764113, 409.45065020932697, 418.0722138857394, 410.1185896940541, 405.2624847785483, 415.0002253264263]"
	#[425.188374277536, 418.5639744289806, 420.27503971558394, 425.649116008843, 428.45556217033527, 422.84831433766556, 420.36904094986824, 424.3812325843221, 412.2058067449864, 416.1238655121187, 407.78263152717506, 409.1736019406074, 417.924223479586, 409.97074930171027, 405.2253886634671, 414.9061014276884]"
	#[425.22883877131835, 418.69742782992324, 420.3179970291608, 425.6420810891671, 428.59879780790055, 422.9278099007155, 420.40752544555744, 424.38515631211334, 412.08417608082794, 416.2327989749336, 407.84178522079003, 409.29938539409386, 417.965834608185, 410.09710165461263, 405.15596909015255, 414.9345757348333]"
	#[425.2457232796773, 418.75231059681187, 420.3976912585918, 425.7146733873171, 428.6303181256492, 423.01286967242595, 420.5065376791668, 424.39262381257, 412.1680625816472, 416.33229404802665, 407.8125916347673, 409.36723849972077, 418.1006569617071, 410.1721952959093, 405.26288590163955, 414.9389849315675]
	#[425.2490545673356, 418.6693102904758, 420.3538873577258, 425.7357897004122, 428.6985551859128, 423.02148485207573, 420.49052112350086, 424.4349133397774, 412.24442264131255, 416.2682654000636, 407.92513597563465, 409.3850651875237, 418.06458337945804, 410.1518942793716, 405.35979152104545, 414.910955265413]
	#[425.15367455261935, 418.6114859427056, 420.20799856615145, 425.67646251562036, 428.451395517269, 422.84523839853824, 420.2912945160713, 424.2489838769863, 412.0006425887588, 416.1618705243783, 407.8187152718367, 409.185578154587, 417.8793503354233, 409.9424342332856, 405.0436364978335, 414.76216832173657]
	#[425.031841002344, 418.3920452857348, 420.1841192428083, 425.6586375961332, 428.52789021867505, 422.8603765405329, 420.29369804044205, 424.2689733613503, 411.9593273100651, 416.04694855057835, 407.7555502703477, 409.16792230499897, 417.818630640702, 410.01785105808733, 405.07406254550284, 414.8199861443207]
	#[425.058663481069, 418.4802881941894, 420.15651028590804, 425.5677870469209, 428.3563419117778, 422.829407036211, 420.3426641203412, 424.409827357911, 412.07462933913905, 416.1121750605444, 407.5862223380535, 409.18620377803273, 417.73020569167204, 409.89423427021796, 405.18007912250596, 414.9340777521567]
	#[425.1430757174021, 418.4775307498714, 420.30315064511177, 425.6599443283269, 428.60295860062604, 423.0149385700628, 420.4546181608784, 424.4483461626261, 412.1824401058277, 416.0692529770287, 407.81789138675936, 409.3203648509589, 417.9990440226431, 410.23158146254997, 405.2478394210552, 414.9755628978825]
	#[425.2751300688802, 418.6768318914253, 420.34606850327697, 425.7004149210995, 428.57397280161365, 422.9530292635578, 420.38847236688486, 424.4388496356107, 412.1535364164279, 416.33602067672746, 407.88728215811136, 409.3545551257705, 418.0120708706651, 410.1531384800972, 405.1646516531945, 414.8263085776191]
	#[425.18757085719477, 418.5878182628393, 420.2824339573636, 425.69872042995195, 428.4859918424735, 422.9202816455381, 420.46171187050436, 424.43653050908745, 412.07027710471795, 416.2173629476575, 407.65948496262155, 409.2082367976745, 417.8083560800035, 410.0927977336805, 405.2419445155865, 414.88243990482624]
	#[425.16161661997785, 418.35222779117424, 420.2025386463164, 425.80121992612777, 428.600594854528, 423.01969661339274, 420.3616135463296, 424.38962563084635, 412.0310922898482, 415.91657647577824, 407.65312867062875, 409.3884942996071, 418.02284413239727, 410.0444493511322, 405.2362035024596, 414.84960506717226]
	#average  values of 30x Scurve
	goldenMedians = [425.13026981352715, 418.52839982307967, 420.2299161548196, 425.64330753167513, 428.5345948147353, 422.9012637106456, 420.3639520705593, 424.3445154402553, 412.0483937524705, 416.1095023598389, 407.7377930757712, 409.2329033383279, 417.91889095709814, 410.02925829832105, 405.1935805215441, 414.84230679299077]
	
	#branch1 = [424.2819697073129, 421.5320823597599, 422.6457259482481, 423.64627766776346, 428.5833886379387, 422.4651132604307, 422.4648221650017, 425.80520257213203, 410.4963215241637, 417.77308778704355, 412.74197778567486, 410.105516239889, 420.57590236064925, 412.5555738969232, 404.8904753851128, 416.89916852041245]
	#[1.002, 0.99287, 0.99428, 1.00471, 0.99989, 1.00103, 0.99503, 0.99657, 1.00378, 0.99602, 0.98788, 0.99787, 0.99368, 0.99388, 1.00075, 0.99507]

	#branch2 = [428.67740851305814, 421.9970379108181, 425.89230970702755, 430.6050964536181, 436.5850639057227, 427.967441909612, 425.72407455736493, 435.09522270940613, 418.3696963688596, 420.19173191766004, 410.29855341931886, 412.9938196494515, 421.32355024280275, 415.26448003762926, 408.72872006596907, 418.57938097969753]
	#[0.99173, 0.99178, 0.9867, 0.98848, 0.98156, 0.98816, 0.98741, 0.97529, 0.98489, 0.99028, 0.99376, 0.99089, 0.99192, 0.98739, 0.99135, 0.99107] 
	
	#branch3 = [429.73590860200545, 422.65490773889525, 427.12654421417994, 429.2013189704229, 436.7733518802197, 426.5998918121342, 426.05361507472537, 429.23987478137917, 415.0153696463223, 418.1337970703876, 411.33719633277207, 414.5305580428136, 423.17643686351437, 418.01238392294806, 408.5969381634558, 418.1706312897837]
	#[0.98928, 0.99024, 0.98385, 0.99171, 0.98114, 0.99133, 0.98665, 0.9886, 0.99285, 0.99516, 0.99125, 0.98722, 0.98758, 0.9809, 0.99167, 0.99204]
	
	#branch4 = [425.81870337897345, 420.63596871762746, 425.60181080597374, 425.79847978323204, 432.0959826223214, 424.8283924193771, 421.6599177662409, 429.6212963177706, 413.10182613670594, 418.4248833115371, 413.37699034206264, 410.39308470777377, 421.46955211697866, 409.31700458928384, 411.43822457128226, 420.2991744639118]
	#[0.99838, 0.99499, 0.98738, 0.99964, 0.99176, 0.99546, 0.99693, 0.98772, 0.99745, 0.99447, 0.98636, 0.99717, 0.99158, 1.00174, 0.98482, 0.98702]




	#branch1 = [422.947193417514, 420.274497022588, 421.07398958894373, 421.89776821879786, 426.9524344250005, 420.90661584871833, 420.96602842131335, 424.4093353010518, 409.2417809056178, 416.5702751950669, 411.5592677642949, 408.5776987194394, 419.2242590234695, 411.4079431585591, 403.7163622012365, 415.5961284399994]
	#[1.00516, 0.99585, 0.998, 1.00888, 1.00371, 1.00474, 0.99857, 0.99985, 1.00686, 0.99889, 0.99071, 1.0016, 0.99689, 0.99665, 1.00366, 0.99819]

	#branch2 = [426.5680458261544, 420.0984728840784, 424.0180704950473, 428.6234777439551, 434.271231454004, 425.5572424623606, 423.59479054760334, 432.8685479798534, 416.3978730765768, 418.08489663731996, 408.2736719585788, 411.04715525108196, 419.4329942533448, 413.1268341274599, 406.50757599429465, 416.4350990844088]
	#[0.99663, 0.99626, 0.99107, 0.99305, 0.98679, 0.99376, 0.99237, 0.98031, 0.98955, 0.99528, 0.99869, 0.99559, 0.99639, 0.9925, 0.99677, 0.99618]

	#branch3 = [426.6855464165666, 419.6228159297564, 424.0610927712372, 426.1367355525052, 433.51473949147885, 423.4841301517505, 422.99732498640316, 425.8554664676344, 412.37497213391055, 415.3649560004017, 408.51947573646515, 411.9442995062973, 420.4646474404247, 415.1917108930729, 405.4653754676507, 415.28141699687603]
	#[0.99635, 0.99739, 0.99097, 0.99884, 0.98851, 0.99862, 0.99377, 0.99645, 0.99921, 1.00179, 0.99809, 0.99342, 0.99395, 0.98757, 0.99933, 0.99894]

	#branch4 = [421.84103643607904, 417.0342914404244, 422.001116994781, 422.1098618032353, 428.47540329556904, 421.22829137159505, 417.98510207979615, 425.9889522220712, 409.2478532062561, 415.1527632423893, 409.93993001542094, 407.11757160322105, 417.9201130502124, 406.225072174832, 407.8061562228252, 416.92664602848447]
	#[1.0078, 1.00358, 0.9958, 1.00837, 1.00014, 1.00397, 1.00569, 0.99614, 1.00684, 1.0023, 0.99463, 1.0052, 1.0, 1.00936, 0.99359, 0.995]

	#branch5 = [427.2055527261364, 420.49837887919904, 422.05142157283916, 424.9268104281534, 428.71707818085696, 427.4541700306296, 423.9721562774586, 425.6237656018472, 413.7913627931715, 416.37111390175744, 409.72442413388035, 410.2331488511577, 421.6542096228553, 412.1009060007963, 409.73941100280337, 419.2775163077446]
	#[0.99514, 0.99532, 0.99568, 1.00169, 0.99957, 0.98935, 0.99149, 0.99699, 0.99579, 0.99937, 0.99515, 0.99756, 0.99114, 0.99497, 0.98891, 0.98942]
	
	#branch6 = [425.36574754722653, 418.8579587414953, 423.0836230906378, 422.1476198020183, 432.37299000581913, 427.2251553578776, 428.1714848992868, 426.54554596339585, 419.4875000634214, 417.4340901886558, 409.5861489716188, 413.6747802105597, 424.7128322623166, 412.7917691109601, 410.45567366549983, 419.8009855423021]
	#[0.99945, 0.99921, 0.99325, 1.00828, 0.99112, 0.98988, 0.98177, 0.99484, 0.98227, 0.99683, 0.99549, 0.98926, 0.984, 0.99331, 0.98718, 0.98819]

	#branch7 = [428.17995877383476, 422.83136493634845, 423.1369003928362, 429.5950761887856, 432.0050818434817, 424.5735255923584, 423.9518159006023, 428.84131243362236, 415.9709415618262, 421.063721545913, 410.41283912690125, 412.8411912851349, 419.33878045685503, 413.9641192951367, 409.3623343824511, 418.18557290806]
	#[0.99288, 0.98982, 0.99313, 0.9908, 0.99197, 0.99606, 0.99154, 0.98951, 0.99057, 0.98823, 0.99348, 0.99126, 0.99661, 0.99049, 0.98982, 0.99201]

	
	
	#corr=[]
	#for i in range(16):
	#	corr.append(round(goldenMedians[i]/medl[i],5))
	#print("medl: ",corr)


	corr=[]
	for i in range(16):
		corr.append(round(goldenMedians[i]/medl2[i],5))
	print("medl2: ",corr)

	# ------------------------------------------------------------------------------
	'''
	



	'''
	# -----------     S-curve Calibration Scan measurements  - manual channel by channel  -------------------
	feb = 0
	ch=0
	Febs[feb].setTypicalConfiguration("tp2")
	Febs[feb].setThreshold(120)
	
	#nr=1
	#[14, 15, 19, 13, 15, 13, 13, 13, 13, 21, 20, 13, 14, 13, 16, 16]
	#baselines = baseMeas.getBaselineSettings("Simple%d"%nr,"Center")
	#printdict(baselines)
	#Febs[feb].setBaselines(baselines[feb])
	Febs[feb].setBaselines([14, 15, 19, 13, 15, 13, 13, 13, 13, 21, 20, 13, 14, 13, 16, 16])
	
	medians=[]
	datas=[]
	for nr in range(10):
		sCurveMeas.runScurveCalibrationScan("Injcalib%d"%nr,feb,ch)
		sCurveMeas.fitScurveData("Injcalib%d"%nr)
		sCurveMeas.plotScurveDetails("Injcalib%d"%nr)
		print(Febs[feb].measData["SCurve_Injcalib%d"%nr]["info"])
		print(Febs[feb].fittedData["SCurve_Injcalib%d"%nr][ch]["median"])
		
		datas.append(Febs[feb].fittedData["SCurve_Injcalib%d"%nr][ch])
		medians.append(Febs[feb].fittedData["SCurve_Injcalib%d"%nr][ch]["median"])
	printlist(datas)
	print(mean(medians))
	# ------------------------------------------------------------------------------
	'''
	# th40             0          1           2           3            4           5           6           7           8          9          10         11          12             13         14         15
	#InjMedians = [161.924248, 163.069680, 163.10792, 159.808299, 164.001476, 162.214913, 163.765489, 163.593340, 161.17032, 163.63993, 164.022391, 161.254741, 162.2162132, 162.9454167, 163.534615, 163.993702]
	
	# th120            0          1           2           3            4           5           6           7           8          9          10         11          12             13         14         15
	#InjMedians = [423.032448, 424.668476, 424.84259, 419.212428, 428.301407, 423.945332, 427.608140, 427.571359, 422.93913, 426.77142, 428.163163, 422.830513, 423.4713685, 425.3499422, 425.242437, 426.8166496]
	'''
	m = mean(InjMedians)
	corr=[]
	for val in InjMedians:
		c = round(m/val,5)
		print(val, m, c)
		corr.append(c)
	print(corr)
	'''
	
	# ------------------------------------------------------------------------------



	# ------------------------------------------------------------------------------
	# ------------------------- End of Measurements Procedure -------------------------------
	# ------------------------------------------------------------------------------
	
	setStatusIndicator("ok","err")
	printc("Measurements finished: %s\n"%(time.strftime("%d.%m.%Y %H:%M:%S")),"blue",0)
	for feb in Febs: Febs[feb].log("Measurements finished: %s\n"%(time.strftime("%d.%m.%Y %H:%M:%S")),"blue",0,False)

	
	Injectors.closeConnection()
